<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Manifiesto por la Ecología del Vector — Movimiento KB</title>
  <meta name="description" content="Manifiesto por la economía y ecología de la información: SVG, MIDI, y distinciones que recrean sistemas. Movimiento KB." />
  <style>
    :root{
      --bg:#0b0c10;           /* fondo oscuro para contraste */
      --fg:#e6f2ff;           /* texto primario */
      --muted:#a3b3c2;        /* texto secundario */
      --accent:#66e0ff;       /* cian vector */
      --accent2:#baff6a;      /* verde eco */
      --shadow: 0 10px 30px rgba(0,0,0,.45);
      --radius: 1.25rem;
      --maxw: 1000px;
    }
    html,body{height:100%}
    body{
      margin:0; background:radial-gradient(1200px 800px at 80% -10%, rgba(102,224,255,.12), transparent 60%),
      radial-gradient(900px 700px at -10% 20%, rgba(186,255,106,.10), transparent 55%), var(--bg);
      color:var(--fg); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji";
      line-height:1.6; letter-spacing:.2px;
    }
    header{
      max-width: var(--maxw); margin: 40px auto 0; padding: 20px; display:grid; gap:16px; align-items:center;
    }
    .badge{ display:inline-flex; align-items:center; gap:.5rem; padding:.35rem .6rem; border:1px solid rgba(255,255,255,.12); border-radius:999px; color:var(--muted); font-size:.85rem; backdrop-filter: blur(6px); }
    .badge .dot{ width:.5rem; height:.5rem; border-radius:50%; background:conic-gradient(var(--accent), var(--accent2)); box-shadow:0 0 12px rgba(102,224,255,.6)}
    h1{ font-size: clamp(2rem, 5vw, 3rem); margin:0; letter-spacing:.5px; }
    h1 .thin{ font-weight:500; color:var(--muted)}
    p.lead{ font-size: clamp(1rem, 1.8vw, 1.15rem); color:var(--muted); margin:-6px 0 0}

    .wrap{ max-width: var(--maxw); margin: 10px auto 60px; padding: 0 20px; }

    /* Hero SVG card */
    .card{
      position:relative; border-radius: var(--radius); overflow:hidden; box-shadow: var(--shadow);
      background: linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.00));
    }
    .hero{
      position:relative; height: 340px; display:grid; place-items:center; isolation:isolate;
    }
    .hero svg{ width:min(900px, 95%); height:100%}
    .glow{ position:absolute; inset: -10% -10% auto auto; width:40vmin; height:40vmin; background:radial-gradient(closest-side, rgba(102,224,255,.25), transparent); filter: blur(20px); pointer-events:none;}

    /* Sections */
    details{
      background: rgba(255,255,255,.03); border:1px solid rgba(255,255,255,.08); border-radius: calc(var(--radius) - .25rem);
      margin: 14px 0; padding: 14px 16px;
      transition: border-color .2s ease, background .2s ease;
    }
    details[open]{ background: rgba(102,224,255,.06); border-color: rgba(102,224,255,.25) }
    summary{
      cursor: pointer; list-style: none; display:flex; align-items:center; gap:.75rem; font-weight:600; letter-spacing:.3px;
    }
    summary::-webkit-details-marker{display:none}
    .chip{ font-size:.8rem; color:var(--bg); background: linear-gradient(90deg, var(--accent), var(--accent2)); border-radius:999px; padding:.2rem .55rem; }
    .muted{ color:var(--muted) }

    .grid{ display:grid; gap: 14px; grid-template-columns: repeat(12, 1fr) }
    .grid > *{ grid-column: span 12 }
    @media(min-width:900px){ .grid > .col6{ grid-column: span 6 } }

    .btns{ display:flex; flex-wrap:wrap; gap:10px; margin: 8px 0 2px }
    .btn{ border:1px solid rgba(255,255,255,.12); background:rgba(255,255,255,.02); color:var(--fg); padding:.55rem .8rem; border-radius:.75rem; cursor:pointer }
    .btn:hover{ border-color: rgba(255,255,255,.25) }

    .foot{ margin-top: 26px; color:var(--muted); font-size:.9rem }
    .kbd{ font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace; background: rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.18); padding:.08rem .35rem; border-radius:.35rem }

    /* Small pulse for the play button */
    .pulse{ position:relative }
    .pulse::after{ content:""; position:absolute; inset:-4px; border-radius:inherit; border:1px solid rgba(186,255,106,.35); filter: blur(2px); opacity:.7; animation: ping 1.8s linear infinite }
    @keyframes ping{ 0%{transform:scale(.98); opacity:.9} 70%{transform:scale(1.06); opacity:0} 100%{transform:scale(1.06); opacity:0} }
  </style>
</head>
<body>
  <header>
    <span class="badge" title="Movimiento KB"><span class="dot"></span> Movimiento KB · Ecología del Vector</span>
    <h1>Manifiesto por la <span class="thin">Ecología del Vector</span></h1>
    <p class="lead">Menos peso, más sentido. Información como distinciones que generan mundos: <span class="kbd">SVG</span>, <span class="kbd">MIDI</span>, texto y código declarativo.</p>
  </header>

  <div class="wrap card hero" aria-label="Ilustración vectorial animada">
    <div class="glow" aria-hidden="true"></div>
    <!-- HERO SVG: líneas vectoriales que se dibujan y generan una K y una B -->
    <svg viewBox="0 0 1200 380" role="img" aria-labelledby="tit desc">
      <title id="tit">Vector vivo: KB</title>
      <desc id="desc">Trazos vectoriales animados que representan el Movimiento KB.</desc>
      <defs>
        <linearGradient id="g1" x1="0" x2="1">
          <stop offset="0" stop-color="#66e0ff"/>
          <stop offset="1" stop-color="#baff6a"/>
        </linearGradient>
        <filter id="soft">
          <feGaussianBlur stdDeviation="1.2"/>
        </filter>
      </defs>
      <!-- Malla de fondo (vector) -->
      <g opacity=".28">
        <path d="M40 60 H1160 M40 120 H1160 M40 180 H1160 M40 240 H1160 M40 300 H1160" stroke="url(#g1)" stroke-width="1" stroke-opacity=".35" />
        <path d="M120 40 V340 M320 40 V340 M520 40 V340 M720 40 V340 M920 40 V340 M1120 40 V340" stroke="url(#g1)" stroke-width="1" stroke-opacity=".25" />
      </g>
      <!-- K -->
      <path id="k1" d="M180 80 V300 M180 190 L320 80 M180 190 L320 300" fill="none" stroke="url(#g1)" stroke-width="10" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="600" stroke-dashoffset="600">
        <animate attributeName="stroke-dashoffset" from="600" to="0" dur="2.2s" begin="0s" fill="freeze" />
      </path>
      <!-- B -->
      <path id="b1" d="M460 80 V300 M460 80 Q620 80 620 170 Q620 260 460 260 M460 170 Q620 170 620 250 Q620 320 480 300" fill="none" stroke="url(#g1)" stroke-width="10" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="900" stroke-dashoffset="900">
        <animate attributeName="stroke-dashoffset" from="900" to="0" dur="2.8s" begin="0.6s" fill="freeze" />
      </path>

      <!-- Partículas -->
      <g filter="url(#soft)">
        <circle r="3" fill="#66e0ff">
          <animateMotion dur="7s" repeatCount="indefinite" path="M120 340 C 200 240, 340 140, 520 120 S 940 180, 1080 60"/>
        </circle>
        <circle r="3" fill="#baff6a">
          <animateMotion dur="8s" repeatCount="indefinite" path="M120 60 C 260 120, 360 220, 560 260 S 920 260, 1080 320"/>
        </circle>
      </g>

      <!-- Lema -->
      <text x="760" y="210" font-size="24" fill="#e6f2ff" opacity="0">
        menos peso · más sentido
        <animate attributeName="opacity" from="0" to="1" dur="1s" begin="1.8s" fill="freeze" />
      </text>
    </svg>
  </div>

  <main class="wrap">
    <div class="btns">
      <button class="btn" id="btnToggleGrid" aria-pressed="false">Alternar malla vectorial</button>
      <button class="btn pulse" id="btnPlay" aria-label="Reproducir demostración MIDI mínima">Reproducir demo KB</button>
      <button class="btn" id="btnTheme">Modo alto contraste</button>
    </div>

    <section class="grid" aria-label="Manifiesto en siete puntos">
      <article class="col6">
        <details open>
          <summary>1. La abundancia es ruido <span class="chip">manifiesto</span></summary>
          <p>Vivimos entre archivos obesos y degradados. La captura de pantalla desplazó al pensamiento estructurado. Recuperemos la forma como lógica, no como residuo de píxeles.</p>
        </details>
        <details>
          <summary>2. Pureza informacional <span class="chip">SVG</span> <span class="chip">MIDI</span></summary>
          <p>Un <strong>SVG</strong> describe; un <strong>MIDI</strong> relaciona. Delegan la materialidad al contexto y conservan el sentido con pesos de kilobytes. Lenguajes, no fotos del lenguaje.</p>
        </details>
        <details>
          <summary>3. Economía = Ecología</summary>
          <p>Cada GB innecesario es energía gastada. La ecología digital comienza en la sintaxis: menos residuos semióticos, más estructura.</p>
        </details>
        <details>
          <summary>4. Distinciones que generan</summary>
          <p>La información es diferencia eficaz. Los vectores no copian el mundo: <em>lo recrean</em> según reglas claras y verificables.</p>
        </details>
      </article>
      <article class="col6">
        <details>
          <summary>5. Estética de la recreación</summary>
          <p>Del archivo estático a la <em>instrucción generativa</em>. Imagen como función; música como secuencia; texto como programa.</p>
        </details>
        <details>
          <summary>6. Pedagogía del KB</summary>
          <p>Alfabetización en <code>&lt;path&gt;</code>, curvas Bézier, frecuencia y duración. Entender es poder ecológico.</p>
        </details>
        <details>
          <summary>7. Silencio digital</summary>
          <p>No más peso: más precisión. No más filtros: más distinciones. Afilar la información para volver legible el mundo.</p>
        </details>
        <details>
          <summary>Licencia y uso</summary>
          <p>Este manifiesto puede copiarse, bifurcarse y adaptarse con atribución. Favorece formatos vectoriales y fuentes locales.</p>
        </details>
      </article>
    </section>

    <section class="foot">Sugerencia: exporta gráficos como <span class="kbd">.svg</span>, partituras/performances como <span class="kbd">.mid</span> o <span class="kbd">.midi</span>, íconos como fuentes o SVG simbólicos, y textos como <span class="kbd">.md</span>. El peso no es virtud; la estructura sí.</section>
  </main>

  <script>
    // Alternar visibilidad de la malla de fondo del SVG
    const btnToggleGrid = document.getElementById('btnToggleGrid');
    btnToggleGrid?.addEventListener('click', () => {
      const svg = document.querySelector('.hero svg');
      const gridGroup = svg?.querySelector('g[opacity]');
      if (!gridGroup) return;
      const hidden = gridGroup.getAttribute('data-hide') === '1';
      gridGroup.setAttribute('data-hide', hidden ? '0' : '1');
      gridGroup.style.opacity = hidden ? '.28' : '0';
      btnToggleGrid.setAttribute('aria-pressed', (!hidden).toString());
    });

    // Modo alto contraste
    const btnTheme = document.getElementById('btnTheme');
    let high = false;
    btnTheme?.addEventListener('click', () => {
      high = !high;
      document.documentElement.style.setProperty('--bg', high ? '#000' : '#0b0c10');
      document.documentElement.style.setProperty('--fg', high ? '#fff' : '#e6f2ff');
      document.documentElement.style.setProperty('--muted', high ? '#c7c7c7' : '#a3b3c2');
      btnTheme.textContent = high ? 'Modo estándar' : 'Modo alto contraste';
    });

    // Pequeña demostración sonora tipo "MIDI mínimo" usando WebAudio
    // Reproduce una secuencia de 8 notas (kb = kilo-breve ☺)
    const btnPlay = document.getElementById('btnPlay');
    let ctx, gain;
    function playSeq(){
      if (!ctx) {
        ctx = new (window.AudioContext || window.webkitAudioContext)();
        gain = ctx.createGain();
        gain.gain.value = 0.06; // volumen bajo para cortesía
        gain.connect(ctx.destination);
      }
      const now = ctx.currentTime + 0.05;
      const seq = [0,2,4,7,9,7,4,2];           // grados
      const base = 220;                        // A3
      const dur = 0.18;                        // duración de cada nota
      seq.forEach((d, i) => {
        const t = now + i * (dur + 0.02);
        const osc = ctx.createOscillator();
        const env = ctx.createGain();
        osc.type = 'triangle';
        osc.frequency.value = base * Math.pow(2, d/12);
        osc.connect(env); env.connect(gain);
        env.gain.setValueAtTime(0, t);
        env.gain.linearRampToValueAtTime(0.8, t + 0.01);
        env.gain.exponentialRampToValueAtTime(0.0001, t + dur);
        osc.start(t);
        osc.stop(t + dur + 0.01);
      });
    }
    btnPlay?.addEventListener('click', playSeq);
  </script>
</body>
</html>
